import React, { useRef, useEffect, useContext } from 'react';
import { ActiveProviderContext } from '../../containers/ResultsView';
import { ExternalLink, Check, ThumbsUp, ArrowUp, ArrowDown, Minus, Clock, Info } from 'lucide-react';
import { formatAmount, getCurrencySymbol } from '../../utils/currency';
import TrustpilotRating from './TrustpilotRating';
import './TrustpilotRating.css';
import ProviderDetailsPopup from './ProviderDetailsPopup';

// Map of provider codes to their website URLs - defined at module level
// so it persists between renders and can be updated
let websiteMap = {
  'abn-amro-bank': 'https://www.abn-amro-bank.com',
  'anz': 'https://www.anz.com',
  'anz-nz': 'https://www.anz-nz.com',
  'auckland-savings-bank-nz': 'https://www.auckland-savings-bank-nz.com',
  'azimo': 'https://www.azimo.com',
  'bank-of-america': 'https://www.bank-of-america.com',
  'bank-of-new-zealand-nz': 'https://www.bank-of-new-zealand-nz.com',
  'barclays': 'https://www.barclays.co.uk/ways-to-bank/international-payments/',
  'bbva': 'https://www.bbva.com',
  'bea': 'https://www.bea.com',
  'bendigo-bank': 'https://www.bendigo-bank.com',
  'bnc': 'https://www.bnc.com',
  'bnp': 'https://www.bnp.com',
  'ccb-hk': 'https://www.ccb-hk.com',
  'chase': 'https://www.chase.com/digital/customer-service/helpful-tips/online-banking/mobile/wire-transfer-send',
  'citibank-singapore': 'https://www.citibank-singapore.com',
  'commerzbank': 'https://www.commerzbank.com',
  'commonwealth-bank-of-australia': 'https://www.commonwealth-bank-of-australia.com',
  'currencyfair': 'https://www.currencyfair.com',
  'deutsche-bank': 'https://www.deutsche-bank.com',
  'halifax': 'https://www.halifax.co.uk/helpcentre/everyday-banking/payments-and-transfers/international-payments/send-money-guide.html',
  'hang-seng': 'https://www.hang-seng.com',
  'hsbc-hk': 'https://www.hsbc-hk.com',
  'ing-nl': 'https://www.ing-nl.com',
  'instarem': 'https://www.instarem.com',
  'kiwibank': 'https://www.kiwibank.com',
  'knab': 'https://www.knab.com',
  'la-banque-postale': 'https://www.la-banque-postale.com',
  'lacaixa': 'https://www.lacaixa.com',
  'lloyds': 'https://www.lloydsbank.com/help-guidance/everyday-banking/payments-and-transfers/international-payments.html',
  'migros': 'https://www.migros.com',
  'monese': 'https://monese.com/gb/en/money-transfers/',
  'moneygram': 'https://www.moneygram.com',
  'national-australia-bank': 'https://www.nab.com.au/personal/international-banking/transfer-money-overseas',
  'nationwide': 'https://www.nationwide.co.uk/help/payments/swift-sepa-international-payments/',
  'natwest': 'https://www.natwest.com/banking-with-natwest/how-to/send-money-abroad.html',
  'ocbc': 'https://www.ocbc.com/personal-banking/digital-banking/overseas-funds-transfer.page',
  'ocbc-whb': 'https://www.ocbc-whb.com',
  'ofx': 'https://www.ofx.com/en-gb/money-transfer/',
  'paypal': 'https://www.paypal.com/uk/digital-wallet/send-receive-money/send-money',
  'postfinance': 'https://www.postfinance.com',
  'Profee': 'https://www.profee.com',
  'qnb-finansbank': 'https://www.qnb-finansbank.com',
  'rbc': 'https://www.rbc.com',
  'rbs': 'https://www.natwest.com/banking-with-natwest/how-to/send-money-abroad.html',
  'regency fx': 'https://www.regencyfx.com',
  'remitly': 'https://www.remitly.com',
  'revolut': 'https://www.revolut.com/money-transfer/',
  'ria': 'https://www.riamoneytransfer.com',
  'sabadell': 'https://www.sabadell.com',
  'scotiabank': 'https://www.scotiabank.com',
  'skrill': 'https://www.skrill.com/en/transfer-money/',
  'starling-bank': 'https://www.starlingbank.com/send-money-abroad/',
  'swedbank-ab': 'https://www.swedbank-ab.com',
  'td-bank': 'https://www.td-bank.com',
  'transfergo': 'https://www.transfergo.com/send-money-abroad',
  'torfx': 'https://www.torfx.com',
  'transferwise': 'https://www.wise.com',
  'unicredit': 'https://www.unicredit.com',
  'western-union': 'https://www.westernunion.com/gb/en/web/send-money/start',
  'westernunion': 'https://www.westernunion.com/gb/en/web/send-money/start',
  'westpac-nz': 'https://www.westpac-nz.com',
  'wise': 'https://www.wise.com',
  'world-remit': 'https://www.world-remit.com',
  'worldfirst': 'https://www.worldfirst.com',
  'worldremit': 'https://www.worldremit.com',
  'xe': 'https://www.xe.com',
  'xoom': 'https://www.xoom.com',
  'zkb': 'https://www.zkb.com'
};

// Try to load any saved providers from localStorage when the module first loads
try {
  const savedProviders = localStorage.getItem('providerWebsites');
  if (savedProviders) {
    // Change the merge order so the websiteMap (from source code) takes precedence
    // over localStorage values
    websiteMap = { ...JSON.parse(savedProviders), ...websiteMap };
    
    // Check specifically for starling-bank to ensure it has the correct URL
    if (websiteMap['starling-bank'] !== 'https://www.starlingbank.com/send-money-abroad/') {
      websiteMap['starling-bank'] = 'https://www.starlingbank.com/send-money-abroad/';
      
      // Update localStorage with the corrected URL
      const updatedProviders = JSON.parse(localStorage.getItem('providerWebsites') || '{}');
      updatedProviders['starling-bank'] = 'https://www.starlingbank.com/send-money-abroad/';
      localStorage.setItem('providerWebsites', JSON.stringify(updatedProviders));
    }
  }
} catch (error) {
  console.error('Error loading saved provider websites:', error);
}

/**
 * Component to display a provider's information in a card
 */
const ProviderCard = ({ 
  provider, 
  index, 
  fromCurrency, 
  toCurrency, 
  amount,
  id,
  name,
  logo,
  rating,
  receiveAmount,
  totalFees,
  rate,
  transferTime,
  transferFee,
  exchangeRateMargin,
  features = [],
  trustpilotRating,
  ratingsLoading,
  onRatingDetermined
}) => {
  const [isLoaded, setIsLoaded] = React.useState(false);
  const [showDetailsPopup, setShowDetailsPopup] = React.useState(false);
  const [isHovered, setIsHovered] = React.useState(false);
  const [showTooltip, setShowTooltip] = React.useState(false);
  const [isInView, setIsInView] = React.useState(false);
  const [hasAnimated, setHasAnimated] = React.useState(false);
  const cardRef = useRef(null);
  const receiveAmountRef = useRef(null);
  const animationTimeoutRef = useRef(null);
  
  // Get the active provider context
  const { activeProviderId, setActiveProviderId, scrollDirection } = useContext(ActiveProviderContext);

  // Debug provider data - log once when component mounts
  React.useEffect(() => {
    // Only log for non-TorFX providers to avoid console spam
    const providerCode = provider?.providerCode?.toLowerCase();
    const providerName = (provider?.name || name || '').toLowerCase();
    
    if (providerCode !== 'torfx' && !providerName.includes('torfx')) {
      // Skip logging for TorFX to avoid console spam
      console.log('Provider data:', { 
        name: provider?.name || name,
        providerCode: provider?.providerCode,
        code: provider?.code
      });
    }
    
    // Set loaded state after a short delay to avoid flashing
    const timer = setTimeout(() => {
      setIsLoaded(true);
    }, 150);
    
    return () => clearTimeout(timer);
  }, [name, provider]);

  // Set up intersection observer to detect when card comes into view
  useEffect(() => {
    if (!cardRef.current) return;

    // Get the provider ID for this card
    const thisProviderId = id || provider?.providerId;
    
    // Prevent the first card from jumping by adding a small delay to animation
    const isFirstCard = index === 0;
    const animationDelay = isFirstCard ? 50 : 0;

    // Helper function to apply animation with smooth transition
    const applyAnimation = () => {
      if (cardRef.current && (!activeProviderId || activeProviderId === thisProviderId)) {
        // Clear any existing timeouts
        if (animationTimeoutRef.current) {
          clearTimeout(animationTimeoutRef.current);
        }
        
        // Only set active provider if it's not already set to this provider
        if (activeProviderId !== thisProviderId) {
          setActiveProviderId(thisProviderId);
        }
        
        setIsInView(true);
        
        // Apply the CSS class with a small delay to prevent the jumping effect
        animationTimeoutRef.current = setTimeout(() => {
          if (cardRef.current) {
            // Remove class first to ensure animation is fresh
            cardRef.current.classList.remove('animate-entrance');
            // Force a reflow to ensure the removal takes effect
            void cardRef.current.offsetWidth;
            // Add the class again
            cardRef.current.classList.add('animate-entrance');
          }
        }, animationDelay);
      }
    };
    
    // Remove animation with clean transition
    const removeAnimation = () => {
      if (cardRef.current) {
        // Clear any existing timeouts
        if (animationTimeoutRef.current) {
          clearTimeout(animationTimeoutRef.current);
        }
        
        setIsInView(false);
        
        if (activeProviderId === thisProviderId) {
          // Smoothly remove the effect first
          cardRef.current.classList.remove('animate-entrance');
          
          // Then update the active provider after a small delay
          animationTimeoutRef.current = setTimeout(() => {
            setActiveProviderId(null);
          }, 100);
        }
      }
    };

    // Create and setup the observer for this card
    const setupObserver = () => {
      // Clean up any existing observers
      if (window.cardObservers && window.cardObservers[thisProviderId]) {
        window.cardObservers[thisProviderId].disconnect();
      }

      // Initialize the observers object if it doesn't exist
      if (!window.cardObservers) {
        window.cardObservers = {};
      }

      // Set precise thresholds to control when the effect activates
      const options = {
        root: null, // viewport
        rootMargin: '0px',
        threshold: [0.1, 0.25, 0.49, 0.5, 0.75, 0.95] // Multiple thresholds for precise control
      };

      window.cardObservers[thisProviderId] = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const ratio = entry.intersectionRatio;
            
            // Apply different thresholds based on scroll direction
            if ((scrollDirection === 'down' && ratio >= 0.49) || 
                (scrollDirection === 'up' && ratio >= 0.75)) {
              // Only apply if this card should have the effect
              if (!activeProviderId || activeProviderId === thisProviderId) {
                applyAnimation();
              }
            } else if ((scrollDirection === 'down' && ratio < 0.49) || 
                      (scrollDirection === 'up' && ratio < 0.75)) {
              // Only remove if this card currently has the effect
              if (activeProviderId === thisProviderId) {
                removeAnimation();
              }
            }
          } else {
            // When completely out of view
            if (activeProviderId === thisProviderId) {
              removeAnimation();
            }
          }
        });
      }, options);

      if (cardRef.current) {
        window.cardObservers[thisProviderId].observe(cardRef.current);
      }
    };

    // Initial setup
    setupObserver();

    // Update on resize to handle orientation changes or window resizing
    window.addEventListener('resize', setupObserver);

    // Capture the current ref value and provider ID to use in cleanup
    const currentCardRef = cardRef.current;
    const currentProviderId = thisProviderId;

    return () => {
      // Clean up observer
      if (window.cardObservers && window.cardObservers[currentProviderId]) {
        window.cardObservers[currentProviderId].disconnect();
        delete window.cardObservers[currentProviderId];
      }
      window.removeEventListener('resize', setupObserver);
      
      // Clear any animation timeouts
      if (animationTimeoutRef.current) {
        clearTimeout(animationTimeoutRef.current);
      }
      
      // If this card has the active effect when unmounting, clear it
      if (activeProviderId === currentProviderId) {
        setActiveProviderId(null);
      }
    };
  }, [id, provider, activeProviderId, setActiveProviderId, scrollDirection, index]);

  // The provider code to use for the Trustpilot rating
  const getProviderCode = () => {
    // First check if we have a direct code
    if (provider?.code) {
      return provider.code.toLowerCase();
    }
    
    // Then check for providerCode 
    if (provider?.providerCode) {
      return provider.providerCode.toLowerCase();
    }
    
    // Check if providerId is in the format "provider-{code}"
    if (provider?.providerId && provider.providerId.startsWith('provider-')) {
      const extractedCode = provider.providerId.split('provider-')[1];
      // Only use the extracted code if it's not numeric
      if (isNaN(extractedCode)) {
        return extractedCode.toLowerCase();
      }
    }
    
    // Fall back to formatted name if available
    if (name) {
      return name.toLowerCase().replace(/\s+/g, '-');
    }
    
    // Last resort - use index with fallback
    return `provider-${index || '0'}`;
  };
  
  const providerCode = getProviderCode();

  // Generate rating visualization elements
  const renderRating = (ratingValue) => {
    // Check for loading state first
    if (ratingsLoading) {
      return <div className="text-xs text-gray-400 animate-pulse">Loading rating...</div>;
    }
    
    // If we have a rating value, render it
    if (ratingValue) {
      const filledCircles = Math.floor(ratingValue);
      const hasHalf = ratingValue % 1 >= 0.5;
      const emptyCircles = 5 - Math.ceil(ratingValue);
      
      // Report the rating value back to parent component for sorting purposes
      if (typeof onRatingDetermined === 'function') {
        onRatingDetermined(ratingValue);
      }
      
      return (
        <div className="flex items-center">
          {[...Array(filledCircles)].map((_, i) => (
            <div key={`filled-${i}`} className="w-2 h-2 rounded-full bg-yellow-400 mr-1"></div>
          ))}
          {hasHalf && (
            <div className="w-2 h-2 rounded-full bg-gradient-to-r from-yellow-400 to-gray-200 mr-1"></div>
          )}
          {[...Array(emptyCircles)].map((_, i) => (
            <div key={`empty-${i}`} className="w-2 h-2 rounded-full bg-gray-200 mr-1"></div>
          ))}
          <div className="ml-1 flex items-center text-xs text-gray-500">
            <ThumbsUp size={10} className="mr-1" /> {ratingValue.toFixed(1)}
          </div>
        </div>
      );
    }
    
    // Fallback if no rating is available
    if (typeof onRatingDetermined === 'function') {
      onRatingDetermined(0); // Report 0 for sorting when no rating is available
    }
    return <div className="text-xs text-gray-400">Rating N/A</div>;
  };

  // Format transfer time for display
  const formatTransferTime = () => {
    // First check if we have a formatted transferTime string
    if (provider?.transferTime || transferTime) {
      const timeValue = provider?.transferTime || transferTime;
      
      // Check if this is an ISO date string (delivered from the Wise API)
      if (timeValue && typeof timeValue === 'string' && timeValue.includes('T') && timeValue.includes('Z')) {
        try {
          // Try to parse the ISO date string
          const deliveryDate = new Date(timeValue);
          const now = new Date();
          
          // Calculate hours difference
          const diffHours = Math.round((deliveryDate - now) / (1000 * 60 * 60));
          
          // If it's the same day
          if (diffHours < 24 && deliveryDate.getDate() === now.getDate()) {
            if (diffHours <= 1) {
              return 'Within 1 hour';
            }
            return `Within ${diffHours} hours`;
          }
          
          // If it's tomorrow
          const tomorrow = new Date(now);
          tomorrow.setDate(tomorrow.getDate() + 1);
          if (deliveryDate.getDate() === tomorrow.getDate() && 
              deliveryDate.getMonth() === tomorrow.getMonth() && 
              deliveryDate.getFullYear() === tomorrow.getFullYear()) {
            return 'Tomorrow';
          }
          
          // If it's within a week
          const daysDiff = Math.round((deliveryDate - now) / (1000 * 60 * 60 * 24));
          if (daysDiff <= 7) {
            return `${daysDiff} days`;
          }
          
          // Format as date
          return deliveryDate.toLocaleDateString();
        } catch (e) {
          // If parsing fails, just return the string
          return timeValue;
        }
      }
      
      return timeValue;
    }
    
    // Fall back to hours format
    const timeHours = provider?.transferTimeHours || provider?.timeHours || { min: null, max: null };
    
    if (timeHours.min !== null && timeHours.max !== null) {
      if (timeHours.min === timeHours.max) {
        return `${timeHours.min} hours`;
      }
      return `${timeHours.min}-${timeHours.max} hours`;
    }
    
    return 'Unknown';
  };

  // Wrap icon components to prevent flashing
  // eslint-disable-next-line no-unused-vars
  const IconWrapper = ({ children }) => (
    <span className={isLoaded ? 'opacity-100' : 'opacity-0'} style={{ transition: 'opacity 0.2s ease-in-out' }}>
      {children}
    </span>
  );

  // Handle opening and closing the details popup
  // eslint-disable-next-line no-unused-vars
  const openDetailsPopup = () => {
    setShowDetailsPopup(true);
    // Prevent body scrolling when popup is open
    document.body.style.overflow = 'hidden';
  };

  const closeDetailsPopup = () => {
    setShowDetailsPopup(false);
    // Restore body scrolling
    document.body.style.overflow = '';
  };

  return (
    <>
      <style jsx="true" global="true">{`
        .text-shimmer {
          background: linear-gradient(
            to right,
            #3CBF7A 20%,
            #4dd88a 40%,
            #34a86b 60%,
            #3CBF7A 80%
          );
          background-size: 200% auto;
          background-clip: text;
          text-fill-color: transparent;
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          animation: text-shine 1.5s linear infinite;
        }
        
        @keyframes text-shine {
          to {
            background-position: 200% center;

// Fallback if no rating is available
if (typeof onRatingDetermined === 'function') {
  onRatingDetermined(0); // Report 0 for sorting when no rating is available
}
return <div className="text-xs text-gray-400">Rating N/A</div>;
};

// Format transfer time for display
const formatTransferTime = () => {
// First check if we have a formatted transferTime string
if (provider?.transferTime || transferTime) {
  const timeValue = provider?.transferTime || transferTime;
          100% { transform: translateY(-4px); box-shadow: 0 12px 24px rgba(0, 0, 0, 0.1); }
        }

        .glass-effect {
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(10px);
          -webkit-backdrop-filter: blur(10px);
        }

        .feature-tag {
          transition: all 0.2s ease;
        }

        .feature-tag:hover {
          transform: scale(1.05);
          background: rgba(79, 70, 229, 0.1);
        }

        .tooltip {
          position: absolute;
          z-index: 9999;
          background: white;
          border-radius: 8px;
          padding: 12px;
          box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
          width: 280px;
          font-size: 13px;
          line-height: 1.4;
          color: #4B5563;
          border: 1px solid #E5E7EB;
          opacity: 0;
          visibility: hidden;
          transition: all 0.2s ease;
          text-align: left;
          right: calc(100% + 12px);
          top: 50%;
          transform: translateY(-50%) translateX(4px);
        }

        .tooltip.show {
          opacity: 1;
          visibility: visible;
          transform: translateY(-50%) translateX(0);
        }

        .tooltip::before {
          content: '';
          position: absolute;
          top: 50%;
          right: -6px;
          transform: translateY(-50%);
          border-width: 6px 0 6px 6px;
          border-style: solid;
          border-color: transparent transparent transparent white;
        }

        @media (max-width: 640px) {
          .mobile-stack {
            flex-direction: column;
          }
          
          .mobile-center {
            text-align: center;
          }

          .animate-entrance {
            animation: shadowLift 0.3s forwards ease-out;
          }
        
          @keyframes shadowLift {
            0% {
              transform: translateY(0);
              box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
              border-color: #e5e7eb;
            }
            100% {
              transform: translateY(-3px);
              box-shadow: 0 10px 25px rgba(99, 102, 241, 0.07);
              border-color: #e0e7ff;
            }
          }
        
          .card-hover:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(99, 102, 241, 0.07);
            border-color: #e0e7ff;
          }  
          @keyframes card-entrance {
            0% { transform: translateY(0); box-shadow: 0 0 0 rgba(0, 0, 0, 0); }
            100% { transform: translateY(-2px); box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08); }
          }

          .tooltip {
            position: absolute;
            bottom: 100%;
            left: 50%;
            right: auto;
            top: auto;
            transform: translateX(-50%) translateY(4px);
            width: calc(100vw - 32px);
            max-width: 320px;
            text-align: left;
            margin-bottom: 8px;
          }

          .tooltip.show {
            transform: translateX(-50%) translateY(0);
          }

          .tooltip::before {
            display: block;
      
      .mobile-center {
        text-align: center;
      }

      .card-hover:hover, .card-in-view {
        transform: translateY(-2px); /* Less dramatic lift on mobile */
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
      }
      
      @keyframes card-entrance {
        0% { transform: translateY(0); box-shadow: 0 0 0 rgba(0, 0, 0, 0); }
        100% { transform: translateY(-2px); box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08); }
      }

      .tooltip {
        position: absolute;
        bottom: 100%;
        left: 50%;
        right: auto;
        top: auto;
        transform: translateX(-50%) translateY(4px);
        width: calc(100vw - 32px);
        max-width: 320px;
        text-align: left;
        margin-bottom: 8px;
      }

      .tooltip.show {
        transform: translateX(-50%) translateY(0);
      }

      .tooltip::before {
        display: block;
        top: auto;
        bottom: -6px;
        left: 50%;
        right: auto;
    {/* Card Header - Provider info and amount */}
    <div className="flex flex-col sm:flex-row items-center justify-between p-6 border-b border-gray-100">
      <div className="flex flex-col items-center sm:items-start mb-4 sm:mb-0">
        <div className="relative group">
          <img 
            src={provider?.logo || logo || '/images/providers/default.png'} 
            alt={`${provider?.name || name || 'Provider'} logo`} 
            className="h-32 w-32 sm:h-40 sm:w-40 object-contain transition-transform duration-300 group-hover:scale-105"
            onError={(e) => {
              const code = (provider?.providerCode || '').toLowerCase();
              let fallbackUrl = '/images/providers/default.png';
              if (code === 'xe') fallbackUrl = '/images/providers/xe.png';
              else if (code === 'torfx') fallbackUrl = '/images/providers/torfx.png';
              else if (code === 'wise') fallbackUrl = '/images/providers/wise.png';
              else if (code === 'western-union' || code === 'westernunion') fallbackUrl = '/images/providers/westernunion.png';
              e.target.onerror = null;
              e.target.src = fallbackUrl;
              e.target.onerror = () => { e.target.src = fallbackUrl.startsWith('/') ? fallbackUrl.substring(1) : '/' + fallbackUrl; };
            }}
          />
        </div>
        
        {providerCode && (
          <div className="mt-3">
            <TrustpilotRating 
              providerName={providerCode} 
              preloadedRating={trustpilotRating}
              onRatingDetermined={onRatingDetermined}
            />
          </div>
        )}
        {!providerCode && renderRating(provider?.rating || rating)}
      </div>
      
      <div className="text-center sm:text-right">
        {(
          provider?.providerCode?.toLowerCase() === 'torfx' ||
          provider?.providerCode?.toLowerCase() === 'xe' ||
          provider?.providerCode?.toLowerCase() === 'profee' ||
          provider?.providerCode?.toLowerCase() === 'regencyfx' ||
          provider?.providerCode?.toLowerCase() === 'pandaremit' ||
          (provider?.name || name || '').toLowerCase().includes('torfx') ||
          (provider?.name || name || '').toLowerCase().includes('xe') ||
          (provider?.name || name || '').toLowerCase().includes('profee') ||
          (provider?.name || name || '').toLowerCase().includes('regency') ||
          (provider?.name || name || '').toLowerCase().includes('panda')
        ) && (
          <div className="relative inline-block">
            <div 
              className="inline-flex items-center text-xs font-medium text-amber-600 bg-amber-50 py-1.5 px-3 rounded-full mb-3 cursor-help"
              onMouseEnter={() => setShowTooltip(true)}
              onMouseLeave={() => setShowTooltip(false)}
              onTouchStart={() => setShowTooltip(!showTooltip)}
            >
              <Info size={14} className="mr-1.5" />
              Indicative Rate
            </div>
            <div className={`tooltip ${showTooltip ? 'show' : ''}`} style={{ pointerEvents: 'none' }}>
              While we do our best to get accurate rates from this provider, the rate shown is an indication based on current market variables and may change when you proceed with the transfer.
            </div>
          </div>
        )}
        <div className="text-sm uppercase font-medium text-indigo-600 tracking-wide">They receive</div>
        <div className="text-3xl font-bold mt-1">
          <span className="text-shimmer">
            {getCurrencySymbol(toCurrency)} {formatAmount(provider?.amountReceived || receiveAmount || 0)}
          </span>
        </div>
        <div className="text-sm text-gray-600 mt-2 bg-indigo-50 py-1 px-3 rounded-full inline-flex items-center">
          <span className="mr-1.5">Fees:</span>
          {getCurrencySymbol(fromCurrency)} {formatAmount(provider?.transferFee || transferFee || 0)}
        </div>
      </div>
    </div>
    
    {/* Card Body - Exchange details */}
    <div className="p-6">
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
        {/* Exchange Rate */}
        <div className="flex items-start group">
          <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
          <div className="text-left">
            <div className="text-sm text-gray-600 font-medium mb-1.5">Exchange Rate</div>
            <div className="font-bold text-lg">{`1 ${fromCurrency} = ${(provider?.rate || rate || 0).toFixed(4)} ${toCurrency}`}</div>
          </div>
        </div>
        
        {/* Delivery Time */}
        <div className="flex items-start group">
          <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
          <div className="text-left">
            <div className="text-sm text-gray-600 font-medium mb-1.5 flex items-center">
              <Clock size={16} className="mr-1.5" />
              Delivery Time
            </div>
            <div className="font-medium">{formatTransferTime()}</div>
          </div>
        </div>
        
        {/* Fees */}
        <div className="flex items-start group">
          <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
          <div className="text-left">
            <div className="text-sm text-gray-600 font-medium mb-1.5">Fee</div>
            <div className="font-medium">{getCurrencySymbol(fromCurrency)} {formatAmount(provider?.transferFee || transferFee || 0)}</div>
          </div>
        </div>
        
        {/* Rate Margin */}
        <div className="flex items-start group">
          <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
          <div className="text-left">
            <div className="text-sm text-gray-600 font-medium mb-1.5">Rate Margin</div>
            <div>
              {provider?.effectiveRate && provider?.baseRate ? (
                provider.effectiveRate > provider.baseRate ? (
                  <div className="flex items-center text-green-600 font-medium">
                    <ArrowUp size={16} className="mr-1.5" />
                    <span>{`${((provider.effectiveRate / provider.baseRate - 1) * 100).toFixed(2)}% above mid-market`}</span>
                  </div>
                ) : provider.effectiveRate < provider.baseRate ? (
                  <div className="flex items-center text-red-600 font-medium">
                    <ArrowDown size={16} className="mr-1.5" />
                    <span>{`${((1 - provider.effectiveRate / provider.baseRate) * 100).toFixed(2)}% below mid-market`}</span>
                  </div>
                ) : (
                  <div className="flex items-center text-gray-600 font-medium">
                    <Minus size={16} className="mr-1.5" />
                    <span>Same as mid-market</span>
                  </div>
                )
              ) : (
                `${((provider?.exchangeRateMargin || exchangeRateMargin || 0) * 100).toFixed(2)}%`
              )}
            </div>
          </div>
        </div>
      </div>
      
      {/* Features */}
      <div className="mt-6">
        <div className="flex flex-wrap gap-2">
          {(provider?.features || features).map((feature, idx) => (
            <span 
              key={idx} 
              className="feature-tag inline-flex items-center text-sm text-indigo-700 bg-indigo-50 py-1.5 px-3 rounded-full"
            >
              <Check className="w-4 h-4 text-green-500 mr-1.5" />
              {feature}
            </span>
          ))}
        </div>
      </div>
    </div>
    
    {/* Card Footer - CTA */}
    <div className="px-6 py-4 border-t border-gray-100 flex items-center justify-end">
      <a 
        href={getProviderWebsite(provider?.providerCode || provider?.code || provider?.name || name || '')} 
        target="_blank" 
        rel="noopener noreferrer"
        className="bg-indigo-600 hover:bg-indigo-700 text-white py-2.5 px-6 rounded-lg flex items-center justify-center font-medium transition-all duration-300 hover:shadow-lg hover:shadow-indigo-200"
        style={{ transitionDelay: `${index * 50}ms` }}
      >
        {/* Card Header - Provider info and amount */}
        <div className="flex flex-col sm:flex-row items-center justify-between p-6 border-b border-gray-100">
          <div className="flex flex-col items-center sm:items-start mb-4 sm:mb-0">
            <div className="relative group">
              <img 
                src={provider?.logo || logo || '/images/providers/default.png'} 
                alt={`${provider?.name || name || 'Provider'} logo`} 
                className="h-32 w-32 sm:h-40 sm:w-40 object-contain transition-transform duration-300 group-hover:scale-105"
                onError={(e) => {
                  const code = (provider?.providerCode || '').toLowerCase();
                  let fallbackUrl = '/images/providers/default.png';
                  if (code === 'xe') fallbackUrl = '/images/providers/xe.png';
                  else if (code === 'torfx') fallbackUrl = '/images/providers/torfx.png';
                  else if (code === 'wise') fallbackUrl = '/images/providers/wise.png';
                  else if (code === 'western-union' || code === 'westernunion') fallbackUrl = '/images/providers/westernunion.png';
                  e.target.onerror = null;
                  e.target.src = fallbackUrl;
                  e.target.onerror = () => { e.target.src = fallbackUrl.startsWith('/') ? fallbackUrl.substring(1) : '/' + fallbackUrl; };
                }}
              />
            </div>
            
            {providerCode && (
              <div className="mt-3">
                <TrustpilotRating 
                  providerName={providerCode} 
                  preloadedRating={trustpilotRating}
                  onRatingDetermined={onRatingDetermined}
                />
              </div>
            )}
            {!providerCode && renderRating(provider?.rating || rating)}
          </div>
          
          <div className="text-center sm:text-right">
            {(
              provider?.providerCode?.toLowerCase() === 'torfx' ||
              provider?.providerCode?.toLowerCase() === 'xe' ||
              provider?.providerCode?.toLowerCase() === 'profee' ||
              provider?.providerCode?.toLowerCase() === 'regencyfx' ||
              provider?.providerCode?.toLowerCase() === 'pandaremit' ||
              (provider?.name || name || '').toLowerCase().includes('torfx') ||
              (provider?.name || name || '').toLowerCase().includes('xe') ||
              (provider?.name || name || '').toLowerCase().includes('profee') ||
              (provider?.name || name || '').toLowerCase().includes('regency') ||
              (provider?.name || name || '').toLowerCase().includes('panda')
            ) && (
              <div className="relative inline-block">
                <div 
                  className="inline-flex items-center text-xs font-medium text-amber-600 bg-amber-50 py-1.5 px-3 rounded-full mb-3 cursor-help"
                  onMouseEnter={() => setShowTooltip(true)}
                  onMouseLeave={() => setShowTooltip(false)}
                  onTouchStart={() => setShowTooltip(!showTooltip)}
                >
                  <Info size={14} className="mr-1.5" />
                  Indicative Rate
                </div>
                <div className={`tooltip ${showTooltip ? 'show' : ''}`} style={{ pointerEvents: 'none' }}>
                  While we do our best to get accurate rates from this provider, the rate shown is an indication based on current market variables and may change when you proceed with the transfer.
                </div>
              </div>
            )}
            <div className="text-sm uppercase font-medium text-indigo-600 tracking-wide">They receive</div>
            <div className="text-3xl font-bold mt-1">
              <span className="text-shimmer">
                {getCurrencySymbol(toCurrency)} {formatAmount(provider?.amountReceived || receiveAmount || 0)}
              </span>
            </div>
            <div className="text-sm text-gray-600 mt-2 bg-indigo-50 py-1 px-3 rounded-full inline-flex items-center">
              <span className="mr-1.5">Fees:</span>
              {getCurrencySymbol(fromCurrency)} {formatAmount(provider?.transferFee || transferFee || 0)}
            </div>
          </div>
        </div>
        
        {/* Card Body - Exchange details */}
        <div className="p-6">
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
            {/* Exchange Rate */}
            <div className="flex items-start group">
              <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
              <div className="text-left">
                <div className="text-sm text-gray-600 font-medium mb-1.5">Exchange Rate</div>
                <div className="font-bold text-lg">{`1 ${fromCurrency} = ${(provider?.rate || rate || 0).toFixed(4)} ${toCurrency}`}</div>
              </div>
            </div>
            
            {/* Delivery Time */}
            <div className="flex items-start group">
              <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
              <div className="text-left">
                <div className="text-sm text-gray-600 font-medium mb-1.5 flex items-center">
                  <Clock size={16} className="mr-1.5" />
                  Delivery Time
                </div>
                <div className="font-medium">{formatTransferTime()}</div>
              </div>
            </div>
            
            {/* Fees */}
            <div className="flex items-start group">
              <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
              <div className="text-left">
                <div className="text-sm text-gray-600 font-medium mb-1.5">Fee</div>
                <div className="font-medium">{getCurrencySymbol(fromCurrency)} {formatAmount(provider?.transferFee || transferFee || 0)}</div>
              </div>
            </div>
            
            {/* Rate Margin */}
            <div className="flex items-start group">
              <div className="w-1 h-full min-h-[40px] bg-indigo-400 mr-4 self-stretch rounded-full transition-all duration-300 group-hover:bg-indigo-500"></div>
              <div className="text-left">
                <div className="text-sm text-gray-600 font-medium mb-1.5">Rate Margin</div>
                <div>
                  {provider?.effectiveRate && provider?.baseRate ? (
                    provider.effectiveRate > provider.baseRate ? (
                      <div className="flex items-center text-green-600 font-medium">
                        <ArrowUp size={16} className="mr-1.5" />
                        <span>{`${((provider.effectiveRate / provider.baseRate - 1) * 100).toFixed(2)}% above mid-market`}</span>
                      </div>
                    ) : provider.effectiveRate < provider.baseRate ? (
                      <div className="flex items-center text-red-600 font-medium">
                        <ArrowDown size={16} className="mr-1.5" />
                        <span>{`${((1 - provider.effectiveRate / provider.baseRate) * 100).toFixed(2)}% below mid-market`}</span>
                      </div>
                    ) : (
                      <div className="flex items-center text-gray-600 font-medium">
                        <Minus size={16} className="mr-1.5" />
                        <span>Same as mid-market</span>
                      </div>
                    )
                  ) : (
                    `${((provider?.exchangeRateMargin || exchangeRateMargin || 0) * 100).toFixed(2)}%`
                  )}
                </div>
              </div>
            </div>
          </div>
          
          {/* Features */}
          <div className="mt-6">
            <div className="flex flex-wrap gap-2">
              {(provider?.features || features).map((feature, idx) => (
                <span 
                  key={idx} 
                  className="feature-tag inline-flex items-center text-sm text-indigo-700 bg-indigo-50 py-1.5 px-3 rounded-full"
                >
                  <Check className="w-4 h-4 text-green-500 mr-1.5" />
                  {feature}
                </span>
              ))}
            </div>
          </div>
        </div>
        
        {/* Card Footer - CTA */}
        <div className="px-6 py-4 border-t border-gray-100 flex items-center justify-end">
          <a 
            href={getProviderWebsite(provider?.providerCode || provider?.code || provider?.name || name || '')} 
            target="_blank" 
            rel="noopener noreferrer"
            className="bg-indigo-600 hover:bg-indigo-700 text-white py-2.5 px-6 rounded-lg flex items-center justify-center font-medium transition-all duration-300 hover:shadow-lg hover:shadow-indigo-200"
          >
            Get Deal
            <ExternalLink size={16} className="ml-2" />
          </a>
        </div>
      </div>

      {/* Provider Details Popup */}
      {showDetailsPopup && (
        <ProviderDetailsPopup 
          provider={provider || { 
            name, 
            code: name?.toLowerCase().replace(/\s+/g, '-'), 
            logo, 
            rate, 
            transferFee, 
            transferTime 
          }} 
          onClose={closeDetailsPopup}
          fromCurrency={fromCurrency}
          toCurrency={toCurrency}
        />
      )}
    </>
  );
};

// Function to generate provider website URL based on provider code
const getProviderWebsite = (providerCode) => {
  // Convert to lowercase for consistent matching
  const code = providerCode.toLowerCase();
  
  // If the provider is not in our map, try to generate a website URL based on the code
  if (!websiteMap[code] && code) {
    // Generate a likely website URL
    const generatedUrl = `https://www.${code}.com`;
    
    // Add it to both the current map and localStorage for future use
    websiteMap[code] = generatedUrl;
    
    try {
      // Get existing saved providers
      const savedProviders = localStorage.getItem('providerWebsites') || '{}';
      const updatedProviders = JSON.parse(savedProviders);
      
      // Add the new provider
      updatedProviders[code] = generatedUrl;
      
      // Save back to localStorage
      localStorage.setItem('providerWebsites', JSON.stringify(updatedProviders));
    } catch (error) {
      console.error('Error saving provider website:', error);
    }
  }
  
  // Return website URL if it exists in the map, otherwise default to a search
  return websiteMap[code] || `https://www.google.com/search?q=${encodeURIComponent(providerCode)}+money+transfer`;
};

export default ProviderCard; 